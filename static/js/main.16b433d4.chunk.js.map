{"version":3,"sources":["app/components/ImageCard/index.js","app/components/Loader/index.js","api/Unsplash.js","app/components/ImageList/index.js","app/components/Select/index.js","app/index.js","index.js"],"names":["ImageCard","images","Row","map","image","id","urls","Col","md","Image","src","regular","fluid","rounded","Loader","Spinner","animation","variant","axios","create","baseURL","headers","Authorization","process","ImageList","count","setImages","fetchImagesFromUnsplash","a","Unsplash","get","params","orientation","response","data","useEffect","fetchMoreDataFromUnsplash","concat","dataLength","length","next","hasMore","loader","Select","setSortType","Form","Group","onChange","e","target","value","controlId","Label","Control","as","App","useState","sortType","type","sortProperty","downloads","likes","views","sortedImages","sort","b","sortImagesArray","Container","ReactDOM","render","document","querySelector"],"mappings":"4RAoBeA,MAhBf,YAAgC,IAAXC,EAAU,EAAVA,OACnB,OACE,cAACC,EAAA,EAAD,UACGD,EAAOE,KAAI,SAACC,GAAW,IACdC,EAAaD,EAAbC,GAAIC,EAASF,EAATE,KAEZ,OACE,cAACC,EAAA,EAAD,CAAcC,GAAI,EAAlB,SACE,cAACC,EAAA,EAAD,CAAOC,IAAKJ,EAAKK,QAASC,OAAK,EAACC,SAAO,KAD/BR,S,QCJLS,MAJf,WACE,OAAO,cAACC,EAAA,EAAD,CAASC,UAAU,OAAOC,QAAQ,U,QCA5BC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,2BACTC,QAAS,CACPC,cAAc,aAAD,OALDC,kD,QC2CDC,MAvCf,YAAkD,IAA7BvB,EAA4B,EAA5BA,OAAQwB,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UAC5BC,EAAuB,uCAAG,8BAAAC,EAAA,sEACPC,EAASC,IAAI,iBAAkB,CACpDC,OAAQ,CACNN,MAAOA,EACPO,YAAa,eAJa,OACxBC,EADwB,OAOtBC,EAASD,EAATC,KACRR,EAAUQ,GARoB,2CAAH,qDAW7BC,qBAAU,WACRR,MACC,IAEH,IAAMS,EAAyB,uCAAG,8BAAAR,EAAA,sEACTC,EAASC,IAAI,iBAAkB,CACpDC,OAAQ,CACNN,MAAOA,EACPO,YAAa,eAJe,OAC1BC,EAD0B,OAOxBC,EAASD,EAATC,KACRR,EAAUzB,EAAOoC,OAAOH,IARQ,2CAAH,qDAW/B,OACE,cAAC,IAAD,CACEI,WAAYrC,EAAOsC,OACnBC,KAAMJ,EACNK,SAAS,EACTC,OAAQ,cAAC,EAAD,IAJV,SAME,cAAC,EAAD,CAAWzC,OAAQA,O,cCjBV0C,MAnBf,YAAkC,IAAhBC,EAAe,EAAfA,YAChB,OACE,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,MAAN,CACEC,SAAU,SAACC,GAAD,OAAOJ,EAAYI,EAAEC,OAAOC,QACtCC,UAAU,6BAFZ,UAIE,cAACN,EAAA,EAAKO,MAAN,uCACA,eAACP,EAAA,EAAKQ,QAAN,CAAcC,GAAG,SAAjB,UACE,wBAAQJ,MAAM,IAAd,6BACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,4BCqBKK,MA/Bf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNvD,EADM,KACEyB,EADF,OAEa8B,mBAAS,IAFtB,mBAEN/B,EAFM,aAGmB+B,mBAAS,KAH5B,mBAGNC,EAHM,KAGIb,EAHJ,KAqBb,OAhBAT,qBAAU,YACgB,SAACuB,GACvB,IAKMC,EALQ,CACZC,UAAW,YACXC,MAAO,QACPC,MAAO,SAEkBJ,GACrBK,EAAe,YAAI9D,GAAQ+D,MAC/B,SAACpC,EAAGqC,GAAJ,OAAUA,EAAEN,GAAgB/B,EAAE+B,MAEhCjC,EAAUqC,GAEZG,CAAgBT,KACf,CAACA,IAGF,cAACU,EAAA,EAAD,UACE,iCACE,cAAC,EAAD,CAAQvB,YAAaA,IACrB,cAAC,EAAD,CAAW3C,OAAQA,EAAQwB,MAAOA,EAAOC,UAAWA,U,MC1B5D0C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.16b433d4.chunk.js","sourcesContent":["import { Image, Col, Row } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nfunction ImageCard({ images }) {\r\n  return (\r\n    <Row>\r\n      {images.map((image) => {\r\n        const { id, urls } = image;\r\n\r\n        return (\r\n          <Col key={id} md={6}>\r\n            <Image src={urls.regular} fluid rounded />\r\n          </Col>\r\n        );\r\n      })}\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default ImageCard;\r\n","import { Spinner } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Loader() {\r\n  return <Spinner animation=\"grow\" variant=\"info\" />;\r\n}\r\n\r\nexport default Loader;\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://api.unsplash.com',\r\n  headers: {\r\n    Authorization: `Client-ID ${API_KEY}`,\r\n  },\r\n});\r\n","import { useEffect } from 'react';\r\nimport ImageCard from '../ImageCard';\r\nimport Loader from '../Loader';\r\nimport Unsplash from '../../../api/Unsplash';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nfunction ImageList({ images, count, setImages }) {\r\n  const fetchImagesFromUnsplash = async () => {\r\n    const response = await Unsplash.get('/photos/random', {\r\n      params: {\r\n        count: count,\r\n        orientation: 'landscape',\r\n      },\r\n    });\r\n    const { data } = response;\r\n    setImages(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchImagesFromUnsplash();\r\n  }, []);\r\n\r\n  const fetchMoreDataFromUnsplash = async () => {\r\n    const response = await Unsplash.get('/photos/random', {\r\n      params: {\r\n        count: count,\r\n        orientation: 'landscape',\r\n      },\r\n    });\r\n    const { data } = response;\r\n    setImages(images.concat(data));\r\n  };\r\n\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={images.length}\r\n      next={fetchMoreDataFromUnsplash}\r\n      hasMore={true}\r\n      loader={<Loader />}\r\n    >\r\n      <ImageCard images={images} />\r\n    </InfiniteScroll>\r\n  );\r\n}\r\n\r\nexport default ImageList;\r\n","import { Form } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nfunction Select({ setSortType }) {\r\n  return (\r\n    <Form>\r\n      <Form.Group\r\n        onChange={(e) => setSortType(e.target.value)}\r\n        controlId=\"exampleForm.ControlSelect1\"\r\n      >\r\n        <Form.Label>Sort by selected option:</Form.Label>\r\n        <Form.Control as=\"select\">\r\n          <option value=\"-\">From Highest...</option>\r\n          <option value=\"downloads\">Downloads</option>\r\n          <option value=\"likes\">Likes</option>\r\n          <option value=\"views\">Views</option>\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default Select;\r\n","import { useState, useEffect } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport ImageList from './components/ImageList';\r\nimport Select from './components/Select';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  const [images, setImages] = useState([]);\r\n  const [count, setCount] = useState(20);\r\n  const [sortType, setSortType] = useState('');\r\n\r\n  useEffect(() => {\r\n    const sortImagesArray = (type) => {\r\n      const types = {\r\n        downloads: 'downloads',\r\n        likes: 'likes',\r\n        views: 'views',\r\n      };\r\n      const sortProperty = types[type];\r\n      const sortedImages = [...images].sort(\r\n        (a, b) => b[sortProperty] - a[sortProperty]\r\n      );\r\n      setImages(sortedImages);\r\n    };\r\n    sortImagesArray(sortType);\r\n  }, [sortType]);\r\n\r\n  return (\r\n    <Container>\r\n      <main>\r\n        <Select setSortType={setSortType} />\r\n        <ImageList images={images} count={count} setImages={setImages} />\r\n      </main>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}